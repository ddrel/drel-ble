{"ast":null,"code":"import { BluetoothCore, BrowserWebBluetooth, ConsoleLoggerService } from '@manekinekko/angular-web-bluetooth';\nimport { BleService } from '../ble.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../ble.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nconst _c0 = [\"chart\"];\nexport const bleCore = (b, l) => new BluetoothCore(b, l);\nexport const bleService = b => new BleService(b);\n// make sure we get a singleton instance of each service\nconst PROVIDERS = [{\n  provide: BluetoothCore,\n  useFactory: bleCore,\n  deps: [BrowserWebBluetooth, ConsoleLoggerService]\n}, {\n  provide: BleService,\n  useFactory: bleService,\n  deps: [BluetoothCore]\n}];\nexport let TemperatureComponent = /*#__PURE__*/(() => {\n  class TemperatureComponent {\n    get device() {\n      return this.service.getDevice();\n    }\n    constructor(service, snackBar) {\n      this.service = service;\n      this.snackBar = snackBar;\n      service.config({\n        characteristic: '28229ce0-2e66-4f1b-a87d-e841bba4c469',\n        service: '08398469-6586-4ab0-ad45-737857396d87',\n        decoder: value => {\n          const integer = value.getInt16(0);\n          const decimal = value.getUint16(1);\n          return value.getUint16(0, true); //integer + decimal / 100;\n        }\n      });\n    }\n\n    ngOnInit() {\n      this.initChart();\n      this.streamSubscription = this.service.stream().subscribe({\n        next: val => this.updateValue(val),\n        error: err => this.hasError(err)\n      });\n    }\n    initChart() {\n      this.series = new window.TimeSeries();\n      const canvas = this.chartRef.nativeElement;\n      this.chart = new window.SmoothieChart({\n        interpolation: 'bezier',\n        grid: {\n          fillStyle: '#ffffff',\n          strokeStyle: 'rgba(119,119,119,0.18)',\n          borderVisible: false\n        },\n        labels: {\n          fillStyle: '#000000',\n          fontSize: 17\n        },\n        tooltip: true\n      });\n      this.chart.addTimeSeries(this.series, {\n        lineWidth: 1,\n        strokeStyle: '#ff0000',\n        fillStyle: 'rgba(255,161,161,0.30)'\n      });\n      this.chart.streamTo(canvas);\n      this.chart.stop();\n    }\n    requestValue() {\n      this.valuesSubscription = this.service.value().subscribe(() => null, error => this.hasError.bind(this));\n    }\n    updateValue(value) {\n      console.log('Reading temperature %d', value);\n      this.series.append(Date.now(), value);\n      this.chart.start();\n    }\n    disconnect() {\n      this.service.disconnectDevice();\n      this.series.clear();\n      this.chart.stop();\n      this.valuesSubscription.unsubscribe();\n    }\n    hasError(error) {\n      this.snackBar.open(error, 'Close');\n    }\n    ngOnDestroy() {\n      this.valuesSubscription.unsubscribe();\n      this.streamSubscription.unsubscribe();\n    }\n  }\n  TemperatureComponent.ɵfac = function TemperatureComponent_Factory(t) {\n    return new (t || TemperatureComponent)(i0.ɵɵdirectiveInject(i1.BleService), i0.ɵɵdirectiveInject(i2.MatSnackBar));\n  };\n  TemperatureComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemperatureComponent,\n    selectors: [[\"ble-temperature\"]],\n    viewQuery: function TemperatureComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartRef = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature(PROVIDERS)],\n    decls: 2,\n    vars: 0,\n    consts: [[\"width\", \"549\", \"height\", \"180\"], [\"chart\", \"\"]],\n    template: function TemperatureComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0, 1);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{display:block}canvas[_ngcontent-%COMP%]{margin-left:-16px}\"]\n  });\n  return TemperatureComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}