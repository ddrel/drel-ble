{"ast":null,"code":"import { BluetoothCore, BrowserWebBluetooth, ConsoleLoggerService } from '@manekinekko/angular-web-bluetooth';\nimport { BleService } from '../ble.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../ble.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@swimlane/ngx-charts\";\nconst _c0 = [\"chart\"];\nconst _c1 = function () {\n  return [300, 200];\n};\nconst _c2 = function () {\n  return [\"#5AA454\"];\n};\nconst _c3 = function (a0) {\n  return {\n    domain: a0\n  };\n};\nexport const bleCore = (b, l) => new BluetoothCore(b, l);\nexport const bleService = b => new BleService(b);\n// make sure we get a singleton instance of each service\nconst PROVIDERS = [{\n  provide: BluetoothCore,\n  useFactory: bleCore,\n  deps: [BrowserWebBluetooth, ConsoleLoggerService]\n}, {\n  provide: BleService,\n  useFactory: bleService,\n  deps: [BluetoothCore]\n}];\nexport let RotaryComponent = /*#__PURE__*/(() => {\n  class RotaryComponent {\n    get device() {\n      return this.service.getDevice();\n    }\n    constructor(service, snackBar) {\n      this.service = service;\n      this.snackBar = snackBar;\n      this.data = [{\n        name: 'Degree',\n        value: 0\n      }];\n      service.config({\n        characteristic: '8df0983e-7709-4fa9-87ea-5bdbc0821a7d',\n        service: '08398469-6586-4ab0-ad45-737857396d87',\n        decoder: value => {\n          const integer = value.getInt16(0);\n          const decimal = value.getUint16(0);\n          return value.getUint16(0, true); // Math.abs(integer) + Math.abs(decimal) / 100;\n        }\n      });\n    }\n    /**\n     {\n        next: (val: number) => this.updateValue(val),\n        error: (err) => this.hasError(err),\n      }\n     */\n    ngOnInit() {\n      this.streamSubscription = this.service.stream().subscribe({\n        next: val => this.updateValue(val),\n        error: err => this.hasError(err)\n      });\n    }\n    initChart() {}\n    requestValue() {\n      this.valuesSubscription = this.service.value().subscribe(() => null, error => this.hasError.bind(this));\n    }\n    updateValue(value) {\n      console.log('Reading degree %d', value);\n      this.data = [{\n        name: 'Degree',\n        value: value\n      }];\n    }\n    disconnect() {\n      this.service.disconnectDevice();\n      this.valuesSubscription.unsubscribe();\n    }\n    hasError(error) {\n      this.snackBar.open(error, 'Close');\n    }\n    ngOnDestroy() {\n      this.valuesSubscription.unsubscribe();\n      this.streamSubscription.unsubscribe();\n    }\n  }\n  RotaryComponent.ɵfac = function RotaryComponent_Factory(t) {\n    return new (t || RotaryComponent)(i0.ɵɵdirectiveInject(i1.BleService), i0.ɵɵdirectiveInject(i2.MatSnackBar));\n  };\n  RotaryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RotaryComponent,\n    selectors: [[\"ble-rotarydegree\"]],\n    viewQuery: function RotaryComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartRef = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature(PROVIDERS)],\n    decls: 2,\n    vars: 8,\n    consts: [[3, \"view\", \"scheme\", \"results\", \"designatedTotal\"], [\"chart\", \"\"]],\n    template: function RotaryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"ngx-charts-pie-grid\", 0, 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction0(4, _c1))(\"scheme\", i0.ɵɵpureFunction1(6, _c3, i0.ɵɵpureFunction0(5, _c2)))(\"results\", ctx.data)(\"designatedTotal\", 360);\n      }\n    },\n    dependencies: [i3.PieGridComponent],\n    styles: [\"[_nghost-%COMP%]{display:block}canvas[_ngcontent-%COMP%]{margin-left:-16px}\"]\n  });\n  return RotaryComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}